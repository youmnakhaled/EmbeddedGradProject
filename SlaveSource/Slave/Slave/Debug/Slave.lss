
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000005e0  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014eb  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000928  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a54  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  00003108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000590  00000000  00000000  00003428  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000917  00000000  00000000  000039b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000042cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 34 02 	call	0x468	; 0x468 <main>
  7a:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDir>:
		case DIO_PORTC :
		PORTC = Vlaue ;
		break;
		
		case DIO_PORTD :
		PORTD = Vlaue ;
  82:	44 23       	and	r20, r20
  84:	b9 f1       	breq	.+110    	; 0xf4 <DIO_SetPinDir+0x72>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	09 f0       	breq	.+2      	; 0x8c <DIO_SetPinDir+0xa>
  8a:	6b c0       	rjmp	.+214    	; 0x162 <DIO_SetPinDir+0xe0>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_SetPinDir+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPinDir+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_SetPinDir+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_SetPinDir+0x5c>
  9a:	08 95       	ret
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPinDir+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPinDir+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_SetPinDir+0x9a>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_SetPinDir+0x82>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_SetPinDir+0xb2>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_SetPinDir+0xca>
 102:	08 95       	ret
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDir+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDir+0x8a>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDir+0xa2>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDir+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDir+0xd2>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_SetPinValue>:
		
	}
}
void DIO_SetPinValue(uint8 Port , uint8 Pin , uint8 Value)
{
	switch (Value)
 164:	44 23       	and	r20, r20
 166:	b9 f1       	breq	.+110    	; 0x1d6 <DIO_SetPinValue+0x72>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <DIO_SetPinValue+0xa>
 16c:	6b c0       	rjmp	.+214    	; 0x244 <DIO_SetPinValue+0xe0>
	{
		case DIO_PIN_HIGH :
		
		switch(Port)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_SetPinValue+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_SetPinValue+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_SetPinValue+0x46>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_SetPinValue+0x5c>
 17c:	08 95       	ret
		{
			case DIO_PORTA :
			SET_BIT(PORTA , Pin);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinValue+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinValue+0x22>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
			break;
 192:	08 95       	ret
			case DIO_PORTB :
			SET_BIT(PORTB , Pin);
 194:	28 b3       	in	r18, 0x18	; 24
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinValue+0x3c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinValue+0x38>
 1a4:	82 2b       	or	r24, r18
 1a6:	88 bb       	out	0x18, r24	; 24
			break;
 1a8:	08 95       	ret
			case DIO_PORTC :
			SET_BIT(PORTC , Pin);
 1aa:	25 b3       	in	r18, 0x15	; 21
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinValue+0x52>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinValue+0x4e>
 1ba:	82 2b       	or	r24, r18
 1bc:	85 bb       	out	0x15, r24	; 21
			break;
 1be:	08 95       	ret
			case DIO_PORTD :
			SET_BIT(PORTD , Pin);
 1c0:	22 b3       	in	r18, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPinValue+0x68>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPinValue+0x64>
 1d0:	82 2b       	or	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
			break;
 1d4:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW :
		
		switch(Port)
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_SetPinValue+0x9a>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_SetPinValue+0x82>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_SetPinValue+0xb2>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_SetPinValue+0xca>
 1e4:	08 95       	ret
		{
			case DIO_PORTA :
			CLR_BIT(PORTA , Pin);
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPinValue+0x8e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPinValue+0x8a>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
			break;
 1fc:	08 95       	ret
			case DIO_PORTB :
			CLR_BIT(PORTB , Pin);
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPinValue+0xa6>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPinValue+0xa2>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
			break;
 214:	08 95       	ret
			case DIO_PORTC :
			CLR_BIT(PORTC , Pin);
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinValue+0xbe>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinValue+0xba>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
			break;
 22c:	08 95       	ret
			case DIO_PORTD :
			CLR_BIT(PORTD , Pin);
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinValue+0xd6>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinValue+0xd2>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <SET_Global_INT>:

void SET_Global_INT (void)
{
	#if GBL_INT == GLOBAL_INTERRUPT_ENABLE
	
	SET_BIT(SREG, 7);
 246:	8f b7       	in	r24, 0x3f	; 63
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	8f bf       	out	0x3f, r24	; 63
 24c:	08 95       	ret

0000024e <EXT_INT0_Init>:
	#endif
}

void EXT_INT0_Init (void)
{
	SET_Global_INT(); // enable global interrupts
 24e:	0e 94 23 01 	call	0x246	; 0x246 <SET_Global_INT>
		
	// select trigger
	#if EXT_INT0_TRIG == RISING_EDGE

	SET_BIT(MCUCR, 0);
 252:	85 b7       	in	r24, 0x35	; 53
 254:	81 60       	ori	r24, 0x01	; 1
 256:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR, 1);
 258:	85 b7       	in	r24, 0x35	; 53
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR, 0);
	CLR_BIT(MCUCR, 1);

	#endif

	SET_BIT(GICR, 6); // enable peripheral interrupt0
 25e:	8b b7       	in	r24, 0x3b	; 59
 260:	80 64       	ori	r24, 0x40	; 64
 262:	8b bf       	out	0x3b, r24	; 59
 264:	08 95       	ret

00000266 <LCD_WriteCommand>:
void LCD_GoTo(uint8 Col, uint8 Row)
{
	uint8 arr[2] = {0x80 , 0xc0};
	
	LCD_WriteCommand(arr[Row]+Col);
}
 266:	cf 93       	push	r28
 268:	c8 2f       	mov	r28, r24
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	63 e0       	ldi	r22, 0x03	; 3
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 288:	8b b3       	in	r24, 0x1b	; 27
 28a:	9c 2f       	mov	r25, r28
 28c:	90 7f       	andi	r25, 0xF0	; 240
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	89 2b       	or	r24, r25
 292:	8b bb       	out	0x1b, r24	; 27
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	63 e0       	ldi	r22, 0x03	; 3
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 29e:	8f e9       	ldi	r24, 0x9F	; 159
 2a0:	9f e0       	ldi	r25, 0x0F	; 15
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_WriteCommand+0x3c>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_WriteCommand+0x42>
 2a8:	00 00       	nop
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 2b4:	20 e1       	ldi	r18, 0x10	; 16
 2b6:	c2 9f       	mul	r28, r18
 2b8:	c0 01       	movw	r24, r0
 2ba:	11 24       	eor	r1, r1
 2bc:	9b b3       	in	r25, 0x1b	; 27
 2be:	9f 70       	andi	r25, 0x0F	; 15
 2c0:	89 2b       	or	r24, r25
 2c2:	8b bb       	out	0x1b, r24	; 27
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	63 e0       	ldi	r22, 0x03	; 3
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 2ce:	8f e9       	ldi	r24, 0x9F	; 159
 2d0:	9f e0       	ldi	r25, 0x0F	; 15
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_WriteCommand+0x6c>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_WriteCommand+0x72>
 2d8:	00 00       	nop
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 2e4:	8f e1       	ldi	r24, 0x1F	; 31
 2e6:	9e e4       	ldi	r25, 0x4E	; 78
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_WriteCommand+0x82>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_WriteCommand+0x88>
 2ee:	00 00       	nop
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <LCD_Init>:
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	64 e0       	ldi	r22, 0x04	; 4
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	65 e0       	ldi	r22, 0x05	; 5
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	66 e0       	ldi	r22, 0x06	; 6
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	67 e0       	ldi	r22, 0x07	; 7
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	81 ee       	ldi	r24, 0xE1	; 225
 33e:	94 e0       	ldi	r25, 0x04	; 4
 340:	21 50       	subi	r18, 0x01	; 1
 342:	80 40       	sbci	r24, 0x00	; 0
 344:	90 40       	sbci	r25, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <LCD_Init+0x4c>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_Init+0x56>
 34a:	00 00       	nop
 34c:	83 e3       	ldi	r24, 0x33	; 51
 34e:	0e 94 33 01 	call	0x266	; 0x266 <LCD_WriteCommand>
 352:	82 e3       	ldi	r24, 0x32	; 50
 354:	0e 94 33 01 	call	0x266	; 0x266 <LCD_WriteCommand>
 358:	88 e2       	ldi	r24, 0x28	; 40
 35a:	0e 94 33 01 	call	0x266	; 0x266 <LCD_WriteCommand>
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 33 01 	call	0x266	; 0x266 <LCD_WriteCommand>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 33 01 	call	0x266	; 0x266 <LCD_WriteCommand>
 36a:	86 e0       	ldi	r24, 0x06	; 6
 36c:	0e 94 33 01 	call	0x266	; 0x266 <LCD_WriteCommand>
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 33 01 	call	0x266	; 0x266 <LCD_WriteCommand>
 376:	08 95       	ret

00000378 <LCD_WriteChar>:
 378:	cf 93       	push	r28
 37a:	c8 2f       	mov	r28, r24
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	63 e0       	ldi	r22, 0x03	; 3
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 39a:	8b b3       	in	r24, 0x1b	; 27
 39c:	9c 2f       	mov	r25, r28
 39e:	90 7f       	andi	r25, 0xF0	; 240
 3a0:	8f 70       	andi	r24, 0x0F	; 15
 3a2:	89 2b       	or	r24, r25
 3a4:	8b bb       	out	0x1b, r24	; 27
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	63 e0       	ldi	r22, 0x03	; 3
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 3b0:	8f e9       	ldi	r24, 0x9F	; 159
 3b2:	9f e0       	ldi	r25, 0x0F	; 15
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_WriteChar+0x3c>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_WriteChar+0x42>
 3ba:	00 00       	nop
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 3c6:	20 e1       	ldi	r18, 0x10	; 16
 3c8:	c2 9f       	mul	r28, r18
 3ca:	c0 01       	movw	r24, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	9b b3       	in	r25, 0x1b	; 27
 3d0:	9f 70       	andi	r25, 0x0F	; 15
 3d2:	89 2b       	or	r24, r25
 3d4:	8b bb       	out	0x1b, r24	; 27
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	63 e0       	ldi	r22, 0x03	; 3
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 3e0:	8f e9       	ldi	r24, 0x9F	; 159
 3e2:	9f e0       	ldi	r25, 0x0F	; 15
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCD_WriteChar+0x6c>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_WriteChar+0x72>
 3ea:	00 00       	nop
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	63 e0       	ldi	r22, 0x03	; 3
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 3f6:	8f e1       	ldi	r24, 0x1F	; 31
 3f8:	9e e4       	ldi	r25, 0x4E	; 78
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_WriteChar+0x82>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <LCD_WriteString>:
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	8c 01       	movw	r16, r24
 40e:	c0 e0       	ldi	r28, 0x00	; 0
 410:	03 c0       	rjmp	.+6      	; 0x418 <LCD_WriteString+0x12>
 412:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_WriteChar>
 416:	cf 5f       	subi	r28, 0xFF	; 255
 418:	f8 01       	movw	r30, r16
 41a:	ec 0f       	add	r30, r28
 41c:	f1 1d       	adc	r31, r1
 41e:	80 81       	ld	r24, Z
 420:	81 11       	cpse	r24, r1
 422:	f7 cf       	rjmp	.-18     	; 0x412 <LCD_WriteString+0xc>
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 33 01 	call	0x266	; 0x266 <LCD_WriteCommand>
 432:	08 95       	ret

00000434 <LED0_OFF>:
	SET_BIT(DDRC , 2);
}

void LED1_ON(void)
{
	SET_BIT(PORTC , 0);
 434:	85 b3       	in	r24, 0x15	; 21
 436:	8b 7f       	andi	r24, 0xFB	; 251
 438:	85 bb       	out	0x15, r24	; 21
 43a:	08 95       	ret

0000043c <LED0_TOGGLE>:
 43c:	95 b3       	in	r25, 0x15	; 21
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	89 27       	eor	r24, r25
 442:	85 bb       	out	0x15, r24	; 21
 444:	08 95       	ret

00000446 <LED0_INIT>:
 446:	84 b3       	in	r24, 0x14	; 20
 448:	84 60       	ori	r24, 0x04	; 4
 44a:	84 bb       	out	0x14, r24	; 20
 44c:	08 95       	ret

0000044e <LED1_OFF>:
}
void LED1_OFF(void)
{
	CLR_BIT(PORTC , 0);
 44e:	85 b3       	in	r24, 0x15	; 21
 450:	8e 7f       	andi	r24, 0xFE	; 254
 452:	85 bb       	out	0x15, r24	; 21
 454:	08 95       	ret

00000456 <LED1_TOGGLE>:
}
void LED1_TOGGLE(void)
{
	Toggle_BIT(PORTC , 0);
 456:	95 b3       	in	r25, 0x15	; 21
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	89 27       	eor	r24, r25
 45c:	85 bb       	out	0x15, r24	; 21
 45e:	08 95       	ret

00000460 <LED1_INIT>:
}
void LED1_INIT(void)
{
	SET_BIT(DDRC , 0);
 460:	84 b3       	in	r24, 0x14	; 20
 462:	81 60       	ori	r24, 0x01	; 1
 464:	84 bb       	out	0x14, r24	; 20
 466:	08 95       	ret

00000468 <main>:

#define F_CPU  16000000


int main(void)
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	65 97       	sbiw	r28, 0x15	; 21
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
	// Two Buttons : labeled in the simulation
	LED0_INIT();				
 47c:	0e 94 23 02 	call	0x446	; 0x446 <LED0_INIT>
	LED1_INIT();
 480:	0e 94 30 02 	call	0x460	; 0x460 <LED1_INIT>
	LCD_Init();
 484:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_Init>
	EXT_INT0_Init();			// interrupt on PD2 : Reset Button 
 488:	0e 94 27 01 	call	0x24e	; 0x24e <EXT_INT0_Init>
	
    uint8 tx_data = 2;			// Tx in my case is a dummy data as we dont need to transmit anything to the Master
	uint8 rx_data = 0;
	uint8 error = 0;			// if Data send is not 1 or 2 as we only have two leds
	
	SPI_Slave_Init();
 48c:	0e 94 cb 02 	call	0x596	; 0x596 <SPI_Slave_Init>
	EXT_INT0_Init();			// interrupt on PD2 : Reset Button 

	
    uint8 tx_data = 2;			// Tx in my case is a dummy data as we dont need to transmit anything to the Master
	uint8 rx_data = 0;
	uint8 error = 0;			// if Data send is not 1 or 2 as we only have two leds
 490:	00 e0       	ldi	r16, 0x00	; 0
	

	
    while (1) 
    {
		rx_data = SPI_TranSiver(tx_data);
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SPI_TranSiver>
 498:	18 2f       	mov	r17, r24
		
		if(rx_data)
 49a:	88 23       	and	r24, r24
 49c:	d1 f3       	breq	.-12     	; 0x492 <main+0x2a>
		{
			LCD_Clear();
 49e:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Clear>

			switch (rx_data)
 4a2:	11 33       	cpi	r17, 0x31	; 49
 4a4:	19 f0       	breq	.+6      	; 0x4ac <main+0x44>
 4a6:	12 33       	cpi	r17, 0x32	; 50
 4a8:	89 f0       	breq	.+34     	; 0x4cc <main+0x64>
 4aa:	20 c0       	rjmp	.+64     	; 0x4ec <main+0x84>
			{
				case '1':
				
				LED0_TOGGLE();
 4ac:	0e 94 1e 02 	call	0x43c	; 0x43c <LED0_TOGGLE>
				uint8 message[] = " Toggling Led  1 ";
 4b0:	82 e1       	ldi	r24, 0x12	; 18
 4b2:	e0 e6       	ldi	r30, 0x60	; 96
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	de 01       	movw	r26, r28
 4b8:	11 96       	adiw	r26, 0x01	; 1
 4ba:	01 90       	ld	r0, Z+
 4bc:	0d 92       	st	X+, r0
 4be:	8a 95       	dec	r24
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <main+0x52>
				LCD_WriteString(message);
 4c2:	ce 01       	movw	r24, r28
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	0e 94 03 02 	call	0x406	; 0x406 <LCD_WriteString>
			
				break;
 4ca:	11 c0       	rjmp	.+34     	; 0x4ee <main+0x86>
				
				case '2':
				
				LED1_TOGGLE();
 4cc:	0e 94 2b 02 	call	0x456	; 0x456 <LED1_TOGGLE>
				uint8 message1[] = " Toggling Led  2 ";
 4d0:	82 e1       	ldi	r24, 0x12	; 18
 4d2:	e2 e7       	ldi	r30, 0x72	; 114
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	de 01       	movw	r26, r28
 4d8:	11 96       	adiw	r26, 0x01	; 1
 4da:	01 90       	ld	r0, Z+
 4dc:	0d 92       	st	X+, r0
 4de:	8a 95       	dec	r24
 4e0:	e1 f7       	brne	.-8      	; 0x4da <main+0x72>
				LCD_WriteString(message1);
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	0e 94 03 02 	call	0x406	; 0x406 <LCD_WriteString>

				break;
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <main+0x86>
				
				default:
				// In case we don't choose led 1 or 2 than thats an invalid Peripheral Number
				error = 1;
 4ec:	01 e0       	ldi	r16, 0x01	; 1
				break;
			}
			
			if(error){
 4ee:	00 23       	and	r16, r16
 4f0:	81 f2       	breq	.-96     	; 0x492 <main+0x2a>
				uint8 message2[] = " Invalid Led Number ";
 4f2:	85 e1       	ldi	r24, 0x15	; 21
 4f4:	e4 e8       	ldi	r30, 0x84	; 132
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	de 01       	movw	r26, r28
 4fa:	11 96       	adiw	r26, 0x01	; 1
 4fc:	01 90       	ld	r0, Z+
 4fe:	0d 92       	st	X+, r0
 500:	8a 95       	dec	r24
 502:	e1 f7       	brne	.-8      	; 0x4fc <main+0x94>
				LCD_WriteString(message2);
 504:	ce 01       	movw	r24, r28
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	0e 94 03 02 	call	0x406	; 0x406 <LCD_WriteString>
 50c:	c2 cf       	rjmp	.-124    	; 0x492 <main+0x2a>

0000050e <__vector_1>:
		
    }
}

ISR(INT0_vect)
{
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	2e 97       	sbiw	r28, 0x0e	; 14
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	cd bf       	out	0x3d, r28	; 61
	// This is a reset button 
	// If pressed , I clear the LCD and switch off the two LEDs at the slave side
	LED0_OFF();
 53e:	0e 94 1a 02 	call	0x434	; 0x434 <LED0_OFF>
	LED1_OFF();
 542:	0e 94 27 02 	call	0x44e	; 0x44e <LED1_OFF>
	LCD_Clear();
 546:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Clear>

	uint8 resetMsg[] = "Resetting !! ";
 54a:	8e e0       	ldi	r24, 0x0E	; 14
 54c:	e9 e9       	ldi	r30, 0x99	; 153
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	de 01       	movw	r26, r28
 552:	11 96       	adiw	r26, 0x01	; 1
 554:	01 90       	ld	r0, Z+
 556:	0d 92       	st	X+, r0
 558:	8a 95       	dec	r24
 55a:	e1 f7       	brne	.-8      	; 0x554 <__vector_1+0x46>
	LCD_WriteString(resetMsg);
 55c:	ce 01       	movw	r24, r28
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	0e 94 03 02 	call	0x406	; 0x406 <LCD_WriteString>
 564:	2e 96       	adiw	r28, 0x0e	; 14
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	ff 91       	pop	r31
 576:	ef 91       	pop	r30
 578:	bf 91       	pop	r27
 57a:	af 91       	pop	r26
 57c:	9f 91       	pop	r25
 57e:	8f 91       	pop	r24
 580:	7f 91       	pop	r23
 582:	6f 91       	pop	r22
 584:	5f 91       	pop	r21
 586:	4f 91       	pop	r20
 588:	3f 91       	pop	r19
 58a:	2f 91       	pop	r18
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <SPI_Slave_Init>:
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_LOW);
}

void  SPI_Master_EndTrans(void)
{
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_HIGH);
 596:	40 e0       	ldi	r20, 0x00	; 0
 598:	64 e0       	ldi	r22, 0x04	; 4
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 5a0:	40 e0       	ldi	r20, 0x00	; 0
 5a2:	65 e0       	ldi	r22, 0x05	; 5
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 5aa:	41 e0       	ldi	r20, 0x01	; 1
 5ac:	66 e0       	ldi	r22, 0x06	; 6
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	67 e0       	ldi	r22, 0x07	; 7
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 5be:	80 e4       	ldi	r24, 0x40	; 64
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	9e b9       	out	0x0e, r25	; 14
 5c4:	8d b9       	out	0x0d, r24	; 13
 5c6:	08 95       	ret

000005c8 <SPI_TranSiver>:
}

uint8 SPI_TranSiver(uint8 data)
{
	SPDR = data;
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	90 bb       	out	0x10, r25	; 16
 5cc:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT( SPSR , 7 ) == 0);
 5ce:	8e b1       	in	r24, 0x0e	; 14
 5d0:	9f b1       	in	r25, 0x0f	; 15
 5d2:	87 ff       	sbrs	r24, 7
 5d4:	fc cf       	rjmp	.-8      	; 0x5ce <SPI_TranSiver+0x6>
	
	return SPDR ;
 5d6:	8f b1       	in	r24, 0x0f	; 15
 5d8:	90 b3       	in	r25, 0x10	; 16
}
 5da:	08 95       	ret

000005dc <_exit>:
 5dc:	f8 94       	cli

000005de <__stop_program>:
 5de:	ff cf       	rjmp	.-2      	; 0x5de <__stop_program>
