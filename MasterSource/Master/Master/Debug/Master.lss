
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d93  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000819  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f4  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  000022a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f4  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000526  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00002ed2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 21 01 	call	0x242	; 0x242 <main>
  64:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDir>:
		case DIO_PORTC :
		PORTC = Vlaue ;
		break;
		
		case DIO_PORTD :
		PORTD = Vlaue ;
  6c:	44 23       	and	r20, r20
  6e:	b9 f1       	breq	.+110    	; 0xde <DIO_SetPinDir+0x72>
  70:	41 30       	cpi	r20, 0x01	; 1
  72:	09 f0       	breq	.+2      	; 0x76 <DIO_SetPinDir+0xa>
  74:	6b c0       	rjmp	.+214    	; 0x14c <DIO_SetPinDir+0xe0>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_SetPinDir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_SetPinDir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_SetPinDir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_SetPinDir+0x5c>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_SetPinDir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_SetPinDir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_SetPinDir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_SetPinDir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_SetPinDir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_SetPinDir+0xca>
  ec:	08 95       	ret
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPinDir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPinDir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPinDir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPinDir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_SetPinValue>:
		
	}
}
void DIO_SetPinValue(uint8 Port , uint8 Pin , uint8 Value)
{
	switch (Value)
 14e:	44 23       	and	r20, r20
 150:	b9 f1       	breq	.+110    	; 0x1c0 <DIO_SetPinValue+0x72>
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <DIO_SetPinValue+0xa>
 156:	6b c0       	rjmp	.+214    	; 0x22e <DIO_SetPinValue+0xe0>
	{
		case DIO_PIN_HIGH :
		
		switch(Port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	89 f0       	breq	.+34     	; 0x17e <DIO_SetPinValue+0x30>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_SetPinValue+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	c9 f0       	breq	.+50     	; 0x194 <DIO_SetPinValue+0x46>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	11 f1       	breq	.+68     	; 0x1aa <DIO_SetPinValue+0x5c>
 166:	08 95       	ret
		{
			case DIO_PORTA :
			SET_BIT(PORTA , Pin);
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_SetPinValue+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_SetPinValue+0x22>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
			break;
 17c:	08 95       	ret
			case DIO_PORTB :
			SET_BIT(PORTB , Pin);
 17e:	28 b3       	in	r18, 0x18	; 24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPinValue+0x3c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPinValue+0x38>
 18e:	82 2b       	or	r24, r18
 190:	88 bb       	out	0x18, r24	; 24
			break;
 192:	08 95       	ret
			case DIO_PORTC :
			SET_BIT(PORTC , Pin);
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_SetPinValue+0x52>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_SetPinValue+0x4e>
 1a4:	82 2b       	or	r24, r18
 1a6:	85 bb       	out	0x15, r24	; 21
			break;
 1a8:	08 95       	ret
			case DIO_PORTD :
			SET_BIT(PORTD , Pin);
 1aa:	22 b3       	in	r18, 0x12	; 18
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_SetPinValue+0x68>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_SetPinValue+0x64>
 1ba:	82 2b       	or	r24, r18
 1bc:	82 bb       	out	0x12, r24	; 18
			break;
 1be:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW :
		
		switch(Port)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <DIO_SetPinValue+0x9a>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_SetPinValue+0x82>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	d9 f0       	breq	.+54     	; 0x200 <DIO_SetPinValue+0xb2>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	29 f1       	breq	.+74     	; 0x218 <DIO_SetPinValue+0xca>
 1ce:	08 95       	ret
		{
			case DIO_PORTA :
			CLR_BIT(PORTA , Pin);
 1d0:	2b b3       	in	r18, 0x1b	; 27
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinValue+0x8e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinValue+0x8a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
			break;
 1e6:	08 95       	ret
			case DIO_PORTB :
			CLR_BIT(PORTB , Pin);
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinValue+0xa6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinValue+0xa2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
			break;
 1fe:	08 95       	ret
			case DIO_PORTC :
			CLR_BIT(PORTC , Pin);
 200:	25 b3       	in	r18, 0x15	; 21
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinValue+0xbe>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinValue+0xba>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	85 bb       	out	0x15, r24	; 21
			break;
 216:	08 95       	ret
			case DIO_PORTD :
			CLR_BIT(PORTD , Pin);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0xd6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0xd2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <LED1_TOGGLE>:
{
	CLR_BIT(PORTC , 0);
}
void LED1_TOGGLE(void)
{
	Toggle_BIT(PORTC , 0);
 230:	95 b3       	in	r25, 0x15	; 21
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	89 27       	eor	r24, r25
 236:	85 bb       	out	0x15, r24	; 21
 238:	08 95       	ret

0000023a <LED1_INIT>:
}
void LED1_INIT(void)
{
	SET_BIT(DDRC , 0);
 23a:	84 b3       	in	r24, 0x14	; 20
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	84 bb       	out	0x14, r24	; 20
 240:	08 95       	ret

00000242 <main>:


int main(void)
{

 	LED1_INIT();
 242:	0e 94 1d 01 	call	0x23a	; 0x23a <LED1_INIT>

	uint8 rx_data = 0;		// we dont care what we recieve, so I just keep it in a variable as it as the return value of the function
	
	SPI_Master_Init();
 246:	0e 94 3d 01 	call	0x27a	; 0x27a <SPI_Master_Init>
	
	SPI_Master_InitTrans();
 24a:	0e 94 56 01 	call	0x2ac	; 0x2ac <SPI_Master_InitTrans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	83 ed       	ldi	r24, 0xD3	; 211
 252:	90 e3       	ldi	r25, 0x30	; 48
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x12>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1c>
 25e:	00 00       	nop
	
	_delay_ms(1000);		// Time just to make sure that the slave(s) are up
	
	UART_Init();
 260:	0e 94 66 01 	call	0x2cc	; 0x2cc <UART_Init>


	while (1)
	{
		// Data is passed from the bluetooth device to the Master using UART protocol 
		data = UART_Rx();
 264:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_Rx>
 268:	c8 2f       	mov	r28, r24
		
		if (data)
 26a:	88 23       	and	r24, r24
 26c:	d9 f3       	breq	.-10     	; 0x264 <main+0x22>
		{
			// I just added this led to show a sign when the Master receives anything from the Bluetooth UART Module
			 LED1_TOGGLE();
 26e:	0e 94 18 01 	call	0x230	; 0x230 <LED1_TOGGLE>
			// Data From Bluetooth is then passed to the slave(s)
			rx_data = SPI_TranSiver(data);
 272:	8c 2f       	mov	r24, r28
 274:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SPI_TranSiver>
 278:	f5 cf       	rjmp	.-22     	; 0x264 <main+0x22>

0000027a <SPI_Master_Init>:
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_LOW);
}

void  SPI_Master_EndTrans(void)
{
	DIO_SetPinValue(DIO_PORTB, DIO_PIN4, DIO_PIN_HIGH);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	64 e0       	ldi	r22, 0x04	; 4
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	65 e0       	ldi	r22, 0x05	; 5
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	66 e0       	ldi	r22, 0x06	; 6
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	67 e0       	ldi	r22, 0x07	; 7
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDir>
 2a2:	83 e5       	ldi	r24, 0x53	; 83
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	9e b9       	out	0x0e, r25	; 14
 2a8:	8d b9       	out	0x0d, r24	; 13
 2aa:	08 95       	ret

000002ac <SPI_Master_InitTrans>:
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	64 e0       	ldi	r22, 0x04	; 4
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_SetPinValue>
 2b6:	08 95       	ret

000002b8 <SPI_TranSiver>:
}

uint8 SPI_TranSiver(uint8 data)
{
	SPDR = data;
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	90 bb       	out	0x10, r25	; 16
 2bc:	8f b9       	out	0x0f, r24	; 15
	
	while(GET_BIT( SPSR , 7 ) == 0);
 2be:	8e b1       	in	r24, 0x0e	; 14
 2c0:	9f b1       	in	r25, 0x0f	; 15
 2c2:	87 ff       	sbrs	r24, 7
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <SPI_TranSiver+0x6>
	
	return SPDR ;
 2c6:	8f b1       	in	r24, 0x0f	; 15
 2c8:	90 b3       	in	r25, 0x10	; 16
}
 2ca:	08 95       	ret

000002cc <UART_Init>:
	while(str[i] != '\0')
	{
		UART_Tx(str[i]);
		i++;
	}
}
 2cc:	81 b3       	in	r24, 0x11	; 17
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	81 bb       	out	0x11, r24	; 17
 2d2:	81 b3       	in	r24, 0x11	; 17
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	81 bb       	out	0x11, r24	; 17
 2d8:	8a b1       	in	r24, 0x0a	; 10
 2da:	88 60       	ori	r24, 0x08	; 8
 2dc:	8a b9       	out	0x0a, r24	; 10
 2de:	8a b1       	in	r24, 0x0a	; 10
 2e0:	80 61       	ori	r24, 0x10	; 16
 2e2:	8a b9       	out	0x0a, r24	; 10
 2e4:	86 e8       	ldi	r24, 0x86	; 134
 2e6:	80 bd       	out	0x20, r24	; 32
 2e8:	87 e6       	ldi	r24, 0x67	; 103
 2ea:	89 b9       	out	0x09, r24	; 9
 2ec:	08 95       	ret

000002ee <UART_Rx>:

uint8 UART_Rx(void)
{
	/*if data received*/
	while(GET_BIT(UCSRA,7) == 0);
 2ee:	5f 9b       	sbis	0x0b, 7	; 11
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <UART_Rx>
	
	return UDR ;
 2f2:	8c b1       	in	r24, 0x0c	; 12
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
